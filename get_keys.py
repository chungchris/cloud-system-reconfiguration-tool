# -*- coding: utf-8 -*- 

###########################################################################
## Chris @ DCSLAB, NCTU
## get_keys.py
## Get the provider list through specified xml file or GUI
###########################################################################

from optparse import OptionParser
from threading import Thread
import xml.etree.ElementTree as ET
import os.path

import gui_key
import myheader as chris


lb_dir = {'EC2':'ELB', 'GCE':'GCE'}

# if specified key_file not existed -> start a GUI to let the user give keys
# use these keys to connect to the clouds
# return a list of myheader.Provider data structure
def get_keys(exist, key_file):
	if not exist:
		# start the gui, activate wx
		guithread = gui_key.GUI_Thread_Key(key_file)
		guithread.setDaemon(True)
		print('debug: starting GUI_Key')
		guithread.start()
		guithread.join()
		if not os.path.exists(key_file):
			print('Error: Specified key file not found')
		# wait until the key kml file is generated by user through gui
		#while(not os.path.exists(key_file)):
		#	time.sleep(2)
		#	print('debug: wait for key file')
	
	providers = []
	#loadbalancers = []
	
	tree = ET.parse(key_file)
	root = tree.getroot()
	print('debug: finish parsing')
	
	if str(root.tag) != 'data':
		print('syntax error in KEY.xml: <data>')
		print('All changes discarded')
		exit()
	for provider in root:
		if str(provider.tag) == 'Provider':
			providers.append(chris.Provider(provider.attrib['name'], provider.attrib['region'], '', '', lb_dir[provider.attrib['name']]))
			for info in provider:
				if str(info.tag) == "AccessID":
					providers[len(providers)-1].id = str(info.text)
				elif str(info.tag) == "SecretKey":
					providers[len(providers)-1].key = str(info.text)
				else:
					print('Error; syntax error in KEY.xml: illegal tag: ' + str(info.tag))
					print('All changes discarded')
					exit()
			#loadbalancers.append(chris.Loadbalancer(info.attrib['name'], '', '', ''))
			#loadbalancers[len(providers)-1].id = providers[len(providers)-1].id
			#loadbalancers[len(providers)-1].key = providers[len(providers)-1].key
			#loadbalancers[len(providers)-1].region = provider.attrib['region']
	print('debug: got keys')
	
	return providers
